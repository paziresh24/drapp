// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rqmTJ9WSF4RQaQFCvo2iUX
// Component: V1gAPdcbOPOO

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import ساعتار from "../../\u0633\u0627\u0639\u062A\u0627\u0631"; // plasmic-import: 2yLCE-L6JXEZ/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../paziresh_24_design_system/plasmic_paziresh_24_design_system.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rqmTJ9WSF4RQaQFCvo2iUX/projectcss
import sty from "./Plasmicساعاتهفتهار.module.css"; // plasmic-import: V1gAPdcbOPOO/css

import ChevronRightIcon from "../paziresh_24_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../paziresh_24_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type Plasmicساعاتهفتهار__VariantMembers = {};
export type Plasmicساعاتهفتهار__VariantsArgs = {};
type VariantPropType = keyof Plasmicساعاتهفتهار__VariantsArgs;
export const Plasmicساعاتهفتهار__VariantProps = new Array<VariantPropType>();

export type Plasmicساعاتهفتهار__ArgsType = {
  centerId?: string;
  dayofweek?: string;
};
type ArgPropType = keyof Plasmicساعاتهفتهار__ArgsType;
export const Plasmicساعاتهفتهار__ArgProps = new Array<ArgPropType>(
  "centerId",
  "dayofweek"
);

export type Plasmicساعاتهفتهار__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  ساعتار?: Flex__<typeof ساعتار>;
  button?: Flex__<typeof Button>;
};

export interface DefaultساعاتهفتهارProps {
  centerId?: string;
  dayofweek?: string;
  className?: string;
}

const $$ = {};

function Plasmicساعاتهفتهار__RenderFunc(props: {
  variants: Plasmicساعاتهفتهار__VariantsArgs;
  args: Plasmicساعاتهفتهار__ArgsType;
  overrides: Plasmicساعاتهفتهار__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "duration",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "ساعتار[].listOfWorkhoureCopy",
        type: "private",
        variableType: "array"
      },
      {
        path: "days",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { id: 6, name: "\u0634\u0646\u0628\u0647", nameEn: "Saturday" },
          {
            id: 7,
            name: "\u06cc\u06a9\u0634\u0646\u0628\u0647",
            nameEn: "Sunday"
          },
          {
            id: 1,
            name: "\u062f\u0648\u0634\u0646\u0628\u0647",
            nameEn: "Monday"
          },
          {
            id: 2,
            name: "\u0633\u0647\u200c\u0634\u0646\u0628\u0647",
            nameEn: "Tuesday"
          },
          {
            id: 3,
            name: "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647",
            nameEn: "Wednesday"
          },
          {
            id: 4,
            name: "\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647",
            nameEn: "Thursday"
          },
          { id: 5, name: "\u062c\u0645\u0639\u0647", nameEn: "Friday" }
        ]
      },
      {
        path: "ساعتار[].checkboxIsChecked",
        type: "private",
        variableType: "boolean"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return fetch(
                      `https://api.paziresh24.com/V1/doctor/center/workhours?center_id=${$props.centerId}`,
                      {
                        method: "GET",
                        headers: {
                          "Content-Type": "application/json",
                          authorization:
                            "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3AyNGRvY3RvcnMuZGFya3ViZS5hcHAvVjEvYXV0aC9sb2dpbiIsImlhdCI6MTcxMjQ4MjU3OCwiZXhwIjoxNzIwMjU4NTc4LCJuYmYiOjE3MTI0ODI1NzgsImp0aSI6InNkV2o4NEM1YjNDS0ZoYlIiLCJzdWIiOiIxODg2MDAyIiwibmFtZSI6Itiy2YfYsdmHIiwiZmFtaWx5Ijoi2KfYsdiv2KfZhtuMIiwiZ2VuZGVyIjoiZmVtYWxlIiwicm9sZSI6InVzZXIiLCJrZXkiOiJ1c2VyLWtleSIsIngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsicHJvdmlkZXIiLCJjb25zdW1lciIsInVzZXIiXSwieC1oYXN1cmEtcHJvdmlkZXItaWQiOiIxNDk0MjM4In0.FaCzpy31LEDkwBL28_ZX3StyOt6oNfPAdmgliX2pWcM"
                        }
                      }
                    )
                      .then(response => response.json())
                      .then(data => ($state.duration = data));
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      />

      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $state.days;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (() => {
          const child$Props = {
            checkboxIsChecked: generateStateValueProp($state, [
              "ساعتار",
              __plasmic_idx_0,
              "checkboxIsChecked"
            ]),
            className: classNames("__wab_instance", sty.ساعتار),
            dayOfWeek: (() => {
              try {
                return currentItem.id;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })(),
            duration: (() => {
              try {
                return $state.duration.data.duration;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })(),
            endedSelectedDay: async id => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const x = JSON.stringify(
                            $state.ساعتار[currentIndex].listOfWorkhoureCopy
                          );
                          return id.forEach(day => {
                            $state.ساعتار[
                              $state.days.findIndex(item => item.id == day)
                            ].listOfWorkhoureCopy = JSON.parse(x);
                            $state.ساعتار[
                              $state.days.findIndex(item => item.id == day)
                            ].checkboxIsChecked = true;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            },
            key: currentIndex,
            listOfWorkhoureCopy: generateStateValueProp($state, [
              "ساعتار",
              __plasmic_idx_0,
              "listOfWorkhoureCopy"
            ]),
            onCheckboxIsCheckedChange: generateStateOnChangeProp($state, [
              "ساعتار",
              __plasmic_idx_0,
              "checkboxIsChecked"
            ]),
            onListOfWorkhoureCopyChange: generateStateOnChangeProp($state, [
              "ساعتار",
              __plasmic_idx_0,
              "listOfWorkhoureCopy"
            ])
          };

          initializePlasmicStates(
            $state,
            [
              {
                name: "ساعتار[].listOfWorkhoureCopy",
                initFunc: ({ $props, $state, $queries }) => [
                  { from: "18:00", to: "21:00" }
                ]
              },
              {
                name: "ساعتار[].checkboxIsChecked",
                initFunc: ({ $props, $state, $queries }) => undefined
              }
            ],
            [__plasmic_idx_0]
          );
          return (
            <ساعتار
              data-plasmic-name={"\u0633\u0627\u0639\u062a\u0627\u0631"}
              data-plasmic-override={overrides.ساعتار}
              {...child$Props}
            />
          );
        })();
      })}
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        children2={
          "\u0630\u062e\u06cc\u0631\u0647 \u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc"
        }
        className={classNames("__wab_instance", sty.button)}
        onClick={async event => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return undefined;
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "\u0633\u0627\u0639\u062a\u0627\u0631",
    "button"
  ],
  sideEffect: ["sideEffect"],
  ساعتار: ["\u0633\u0627\u0639\u062a\u0627\u0631"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  ساعتار: typeof ساعتار;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmicساعاتهفتهار__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmicساعاتهفتهار__VariantsArgs;
    args?: Plasmicساعاتهفتهار__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmicساعاتهفتهار__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmicساعاتهفتهار__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmicساعاتهفتهار__ArgProps,
          internalVariantPropNames: Plasmicساعاتهفتهار__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmicساعاتهفتهار__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName =
      "Plasmic\u0633\u0627\u0639\u0627\u062a\u0647\u0641\u062a\u0647\u0627\u0631";
  } else {
    func.displayName = `Plasmicساعاتهفتهار.${nodeName}`;
  }
  return func;
}

export const Plasmicساعاتهفتهار = Object.assign(
  // Top-level Plasmicساعاتهفتهار renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    ساعتار: makeNodeComponent("\u0633\u0627\u0639\u062a\u0627\u0631"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for Plasmicساعاتهفتهار
    internalVariantProps: Plasmicساعاتهفتهار__VariantProps,
    internalArgProps: Plasmicساعاتهفتهار__ArgProps
  }
);

export default Plasmicساعاتهفتهار;
/* prettier-ignore-end */
