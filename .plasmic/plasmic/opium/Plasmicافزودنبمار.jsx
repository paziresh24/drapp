// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxImportSource @plasmicapp/react-web-runtime */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rqmTJ9WSF4RQaQFCvo2iUX
// Component: tYr5JpmT9sCU
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import TextInput from "../../TextInput"; // plasmic-import: 9dVD7GIhbUbw/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query";
import { DatePicker } from "@paziresh24/apps/drapp/fragment/components/date-picker"; // plasmic-import: tzE88gECIcPY/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rqmTJ9WSF4RQaQFCvo2iUX/projectcss
import sty from "./Plasmicافزودنبمار.module.css"; // plasmic-import: tYr5JpmT9sCU/css
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: D4ulVQNU9fE4/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import CalendarIcon from "../fragment_icons/icons/PlasmicIcon__Calendar"; // plasmic-import: e2zWN9c_lxv7/icon

export const Plasmicافزودنبمار__VariantProps = new Array();

export const Plasmicافزودنبمار__ArgProps = new Array(
  "centerId",
  "serviceId",
  "userCenterId",
  "type",
  "serviceId2"
);

const $$ = {};

function Plasmicافزودنبمار__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const $globalActions = useGlobalActions?.();
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "nationalCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "preferBooktime.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "freeTurnData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "fullname",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "booktime.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "cell",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "inputfullname.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "inputcell.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "تقوم.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "datePicker.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "freeturns",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__bvpUl
        )}
      >
        {"\u06a9\u062f\u0645\u0644\u06cc \u0628\u06cc\u0645\u0627\u0631"}
      </div>
      <TextInput
        data-plasmic-name={"nationalCode"}
        data-plasmic-override={overrides.nationalCode}
        className={classNames("__wab_instance", sty.nationalCode)}
        color={undefined}
        onChange={(...eventArgs) => {
          generateStateOnChangeProp($state, ["nationalCode", "value"])(
            (e => e.target?.value).apply(null, eventArgs)
          );
        }}
        placeholder={``}
        value={generateStateValueProp($state, ["nationalCode", "value"]) ?? ""}
      />

      {(() => {
        try {
          return true;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Dialog
          data-plasmic-name={"booktime"}
          data-plasmic-override={overrides.booktime}
          body={
            <React.Fragment>
              {(() => {
                try {
                  return !$state.fullname.trim();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"verticalStackData"}
                  data-plasmic-override={overrides.verticalStackData}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.verticalStackData)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hOvT4
                    )}
                  >
                    {
                      "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0645\u0627\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f."
                    }
                  </div>
                  <TextInput
                    data-plasmic-name={"inputcell"}
                    data-plasmic-override={overrides.inputcell}
                    className={classNames("__wab_instance", sty.inputcell)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["inputcell", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }}
                    placeholder={
                      "\u062a\u0644\u0641\u0646 \u0647\u0645\u0631\u0627\u0647"
                    }
                    startIcon={
                      <SearchsvgIcon
                        className={classNames(projectcss.all, sty.svg__zJVlC)}
                        role={"img"}
                      />
                    }
                    value={
                      generateStateValueProp($state, ["inputcell", "value"]) ??
                      ""
                    }
                  />

                  <TextInput
                    data-plasmic-name={"inputfullname"}
                    data-plasmic-override={overrides.inputfullname}
                    className={classNames("__wab_instance", sty.inputfullname)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "inputfullname",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={
                      "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
                    }
                    value={
                      generateStateValueProp($state, [
                        "inputfullname",
                        "value"
                      ]) ?? ""
                    }
                  />
                </Stack__>
              ) : null}
              <Stack__
                as={"div"}
                data-plasmic-name={"verticalStackFunction"}
                data-plasmic-override={overrides.verticalStackFunction}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.verticalStackFunction
                )}
                dir={"rtl"}
              >
                <DataFetcher
                  className={classNames(
                    "__wab_instance",
                    sty.httpRestApiFetcher___81441
                  )}
                  dataName={"fetchedDatafirstfreeturn"}
                  errorDisplay={
                    <DataCtxReader__>
                      {$ctx => "Error fetching data"}
                    </DataCtxReader__>
                  }
                  errorName={"fetchError"}
                  headers={{
                    "Content-Type": "application/json",
                    Accept: "application/json"
                  }}
                  loadingDisplay={
                    <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
                  }
                  method={"GET"}
                  noLayout={false}
                  url={(() => {
                    try {
                      return `https://apigw.paziresh24.com/v2/freeturns?center_id=${
                        $props.centerId
                      }&user_center_id=${$props.userCenterId}&service_id=${
                        $props.serviceId
                      }&from=${Math.floor(Date.now() / 1000)}&to=${
                        Math.floor(Date.now() / 1000) + 60 * 24 * 60 * 60
                      }`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "undefined";
                      }
                      throw e;
                    }
                  })()}
                >
                  <DataCtxReader__>
                    {$ctx => (
                      <Button
                        data-plasmic-name={"freeturnBook"}
                        data-plasmic-override={overrides.freeturnBook}
                        children2={
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  const timestamp =
                                    $ctx.fetchedDatafirstfreeturn[0].filds
                                      .result[0].from;
                                  const date = new Date(timestamp * 1000);
                                  const options = {
                                    timeZone: "Asia/Tehran",
                                    year: "numeric",
                                    month: "2-digit",
                                    day: "2-digit",
                                    hour: "2-digit",
                                    minute: "2-digit"
                                  };
                                  const formattedDate = new Intl.DateTimeFormat(
                                    "fa-IR",
                                    options
                                  ).format(date);
                                  return formattedDate
                                    .replace(" ", " - ")
                                    .replace(",", "")
                                    .replace(
                                      /(\d{2})\/(\d{2})\/(\d{4})/,
                                      "$3/$2/$1"
                                    );
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0646\u0648\u0628\u062a\u06cc \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f.";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.freeturnBook
                        )}
                        endIcon={
                          <ChevronLeftIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__eeOuy
                            )}
                            role={"img"}
                          />
                        }
                        loading={(() => {
                          try {
                            return !$state.freeTurnData;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};
                          $steps["patientData"] = !(
                            $state.inputfullname.value || $state.inputcell.value
                          )
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u06cc\u0645\u0627\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["patientData"] != null &&
                            typeof $steps["patientData"] === "object" &&
                            typeof $steps["patientData"].then === "function"
                          ) {
                            $steps["patientData"] = await $steps["patientData"];
                          }
                          $steps["book"] =
                            $state.fullname && $state.cell
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        if (
                                          !$state.cell ||
                                          !$state.fullname ||
                                          $state.cell === false ||
                                          $state.fullname === false
                                        ) {
                                          $state.cell = $state.inputcell.value;
                                          $state.fullname = $state.inputfullname
                                            .value
                                            ? encodeURI(
                                                $state.inputfullname.value
                                              )
                                            : "";
                                        }
                                        const url = `https://apigw.paziresh24.com/v2/book?center_id=${$props.centerId}&user_center_id=${$props.userCenterId}&service_id=${$props.serviceId2}&type=3&request_code=${$state.freeTurnData.request_code}&fullname=${$state.fullname}&cell=${$state.cell}&national_code=${$state.nationalCode.value}`;
                                        console.log(url);
                                        return fetch(url, {
                                          method: "POST"
                                        }).then(response => response.json());
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["book"] != null &&
                            typeof $steps["book"] === "object" &&
                            typeof $steps["book"].then === "function"
                          ) {
                            $steps["book"] = await $steps["book"];
                          }
                        }}
                        startIcon={
                          <ChevronRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fpCl4
                            )}
                            role={"img"}
                          />
                        }
                      />
                    )}
                  </DataCtxReader__>
                </DataFetcher>
                <Button
                  data-plasmic-name={"preferBooktime2"}
                  data-plasmic-override={overrides.preferBooktime2}
                  children2={
                    "\u0632\u0645\u0627\u0646 \u062f\u0644\u062e\u0648\u0627\u0647"
                  }
                  className={classNames("__wab_instance", sty.preferBooktime2)}
                  endIcon={
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__fgTyY)}
                      role={"img"}
                    />
                  }
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateStateدالوانتخابزماندلخواهOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["preferBooktime", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStateدالوانتخابزماندلخواهOpen"] != null &&
                      typeof $steps["updateStateدالوانتخابزماندلخواهOpen"] ===
                        "object" &&
                      typeof $steps["updateStateدالوانتخابزماندلخواهOpen"]
                        .then === "function"
                    ) {
                      $steps["updateStateدالوانتخابزماندلخواهOpen"] =
                        await $steps["updateStateدالوانتخابزماندلخواهOpen"];
                    }
                  }}
                  startIcon={
                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg__sngWi)}
                      role={"img"}
                    />
                  }
                />
              </Stack__>
            </React.Fragment>
          }
          className={classNames("__wab_instance", sty.booktime)}
          onOpenChange={async (...eventArgs) => {
            generateStateOnChangeProp($state, ["booktime", "open"]).apply(
              null,
              eventArgs
            );
            (async val => {
              const $steps = {};
              $steps["updateBooktimeOpen"] =
                $state.nationalCode.value === "" || !$state.nationalCode.value
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["booktime", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateBooktimeOpen"] != null &&
                typeof $steps["updateBooktimeOpen"] === "object" &&
                typeof $steps["updateBooktimeOpen"].then === "function"
              ) {
                $steps["updateBooktimeOpen"] = await $steps[
                  "updateBooktimeOpen"
                ];
              }
              $steps["invokeGlobalAction"] =
                $state.nationalCode.value === "" || !$state.nationalCode.value
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u0645\u0642\u062f\u0627\u0631 \u06a9\u062f \u0645\u0644\u06cc \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }).apply(null, eventArgs);
          }}
          open={generateStateValueProp($state, ["booktime", "open"])}
          title={
            <React.Fragment>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__udZCl
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0644\u0637\u0641\u0627 \u0632\u0645\u0627\u0646 \u0646\u0648\u0628\u062a \u0645\u0648\u0631\u062f\u0646\u0638\u0631 \u062e\u0648\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return $state.fullname && true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__be5Rk
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return `نوبت انتخابی برای بیمار با نام ${$state.fullname} ثبت خواهد شد.`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
            </React.Fragment>
          }
          trigger={
            <Button
              children2={"\u062b\u0628\u062a"}
              className={classNames("__wab_instance", sty.button__rk582)}
              endIcon={
                <ChevronLeftIcon
                  className={classNames(projectcss.all, sty.svg___555Zh)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["درافتاطلاعاتاربر"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const url = `https://apigw.paziresh24.com/v1/patientdata?national-code=${$state.nationalCode.value}`;
                            return fetch(url)
                              .then(response => response.json())
                              .then(data => {
                                $state.fullname = data.fullname;
                                $state.cell = data.cell;
                              });
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["درافتاطلاعاتاربر"] != null &&
                  typeof $steps["درافتاطلاعاتاربر"] === "object" &&
                  typeof $steps["درافتاطلاعاتاربر"].then === "function"
                ) {
                  $steps["درافتاطلاعاتاربر"] = await $steps["درافتاطلاعاتاربر"];
                }
              }}
              startIcon={
                <ChevronRightIcon
                  className={classNames(projectcss.all, sty.svg__ixB1O)}
                  role={"img"}
                />
              }
            />
          }
        />
      ) : null}
      <Dialog
        data-plasmic-name={"preferBooktime"}
        data-plasmic-override={overrides.preferBooktime}
        body={
          <div className={classNames(projectcss.all, sty.freeBox__wlf3E)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eEYf0)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wtRlm
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        const persianDate = $state.datePicker.value
                          ? new Intl.DateTimeFormat("fa-IR").format(
                              $state.datePicker.value * 1000
                            )
                          : new Intl.DateTimeFormat("fa-IR").format(Date.now());
                        return persianDate;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <Dialog
                data-plasmic-name={"\u062a\u0642\u0648\u0645"}
                data-plasmic-override={overrides.تقوم}
                body={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__diqK6)}
                  >
                    <DatePicker
                      data-plasmic-name={"datePicker"}
                      data-plasmic-override={overrides.datePicker}
                      className={classNames("__wab_instance", sty.datePicker)}
                      holidays={[]}
                      locale={"fa"}
                      onChange={async (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "datePicker",
                          "value"
                        ]).apply(null, eventArgs);
                        (async date => {
                          const $steps = {};
                          $steps["updateStateتقومOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["تقوم", "open"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;
                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStateتقومOpen"] != null &&
                            typeof $steps["updateStateتقومOpen"] === "object" &&
                            typeof $steps["updateStateتقومOpen"].then ===
                              "function"
                          ) {
                            $steps["updateStateتقومOpen"] = await $steps[
                              "updateStateتقومOpen"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      value={generateStateValueProp($state, [
                        "datePicker",
                        "value"
                      ])}
                    />
                  </div>
                }
                className={classNames("__wab_instance", sty.تقوم)}
                onOpenChange={generateStateOnChangeProp($state, [
                  "تقوم",
                  "open"
                ])}
                open={generateStateValueProp($state, ["تقوم", "open"])}
                title={
                  "\u062a\u0642\u0648\u06cc\u0645 \u0645\u0627\u0647\u0627\u0646\u0647"
                }
                trigger={
                  <CalendarIcon
                    className={classNames(projectcss.all, sty.svg___4WjYk)}
                    role={"img"}
                  />
                }
              />
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__dfmFm)}>
              <DataFetcher
                className={classNames(
                  "__wab_instance",
                  sty.httpRestApiFetcher___0Hi2F
                )}
                dataName={"fetchedData"}
                errorDisplay={
                  <DataCtxReader__>
                    {$ctx => "Error fetching data"}
                  </DataCtxReader__>
                }
                errorName={"fetchError"}
                headers={{
                  "Content-Type": "application/json",
                  Accept: "application/json"
                }}
                loadingDisplay={
                  <DataCtxReader__>{$ctx => "Loading..."}</DataCtxReader__>
                }
                method={"GET"}
                noLayout={false}
                url={(() => {
                  try {
                    return `https://apigw.paziresh24.com/v2/freeturns?center_id=${$props.centerId}&user_center_id=${$props.userCenterId}&service_id=${$props.serviceId}&from=${$state.datePicker.value}&to=${$state.datePicker.value}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ldCoo)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $ctx.fetchedData[0].filds.result;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___1G1He
                            )}
                            key={currentIndex}
                            onClick={async event => {
                              const $steps = {};
                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          const suspendUrl = `https://apigw.paziresh24.com/v2/suspend?center_id=${$props.centerId}&user_center_id=${$props.userCenterId}&service_id=${$props.serviceId}&type=3&from_timestamp=${currentItem.from}&to_timestamp=${currentItem.to}`;
                                          return fetch(suspendUrl)
                                            .then(response => response.json())
                                            .then(data => {
                                              console.log("omad", data);
                                              const requestCode =
                                                data.request_code;
                                              console.log("1");
                                              if (
                                                !$state.cell ||
                                                !$state.fullname
                                              ) {
                                                $state.cell =
                                                  $state.inputcell.value;
                                                $state.fullname =
                                                  $state.inputfullname.value;
                                                console.log("1_1");
                                              }
                                              console.log("2");
                                              const bookUrl = `https://apigw.paziresh24.com/v2/book?center_id=${
                                                $props.centerId
                                              }&user_center_id=${
                                                $props.userCenterId
                                              }&service_id=${
                                                $props.serviceId
                                              }&type=3&request_code=${requestCode}&fullname=${encodeURI(
                                                $state.fullname
                                              )}&cell=${
                                                $state.cell
                                              }&national_code=${
                                                $state.nationalCode.value
                                              }`;
                                              console.log(bookUrl);
                                              fetch(bookUrl, { method: "POST" })
                                                .then(response =>
                                                  response.json()
                                                )
                                                .then(data => {
                                                  console.log(data);
                                                })
                                                .catch(error =>
                                                  console.error(
                                                    "Error with the book request:",
                                                    error
                                                  )
                                                );
                                            })
                                            .catch(error =>
                                              console.error(
                                                "Error with the suspend request:",
                                                error
                                              )
                                            );
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                              $steps["updatePreferBooktimeOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["preferBooktime", "open"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;
                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePreferBooktimeOpen"] != null &&
                                typeof $steps["updatePreferBooktimeOpen"] ===
                                  "object" &&
                                typeof $steps["updatePreferBooktimeOpen"]
                                  .then === "function"
                              ) {
                                $steps["updatePreferBooktimeOpen"] =
                                  await $steps["updatePreferBooktimeOpen"];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xs03N
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return new Date(
                                      currentItem.from * 1000
                                    ).toLocaleString("fa-IR", {
                                      timeZone: "Asia/Tehran",
                                      hour12: false,
                                      hour: "numeric",
                                      minute: "numeric"
                                    });
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        );
                      })}
                    </Stack__>
                  )}
                </DataCtxReader__>
              </DataFetcher>
            </div>
          </div>
        }
        className={classNames("__wab_instance", sty.preferBooktime)}
        onOpenChange={generateStateOnChangeProp($state, [
          "preferBooktime",
          "open"
        ])}
        open={generateStateValueProp($state, ["preferBooktime", "open"])}
        title={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nctPo
            )}
          >
            {
              "\u0646\u0648\u0628\u062a\u200c\u0647\u0627\u06cc \u062e\u0627\u0644\u06cc"
            }
          </div>
        }
        trigger={
          <Button
            children2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9LDmR
                )}
              >
                {
                  "\u0627\u0646\u062a\u062e\u0627\u0628 \u0632\u0645\u0627\u0646 \u062f\u0644\u062e\u0648\u0627\u0647"
                }
              </div>
            }
            className={classNames("__wab_instance", sty.button__n0AEe)}
            endIcon={
              <ChevronLeftIcon
                className={classNames(projectcss.all, sty.svg__lvBcR)}
                role={"img"}
              />
            }
            startIcon={
              <ChevronRightIcon
                className={classNames(projectcss.all, sty.svg__hb8M)}
                role={"img"}
              />
            }
          />
        }
      />
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "nationalCode",
    "booktime",
    "verticalStackData",
    "inputcell",
    "inputfullname",
    "verticalStackFunction",
    "freeturnBook",
    "preferBooktime2",
    "preferBooktime",
    "\u062a\u0642\u0648\u0645",
    "datePicker"
  ],

  nationalCode: ["nationalCode"],
  booktime: [
    "booktime",
    "verticalStackData",
    "inputcell",
    "inputfullname",
    "verticalStackFunction",
    "freeturnBook",
    "preferBooktime2"
  ],

  verticalStackData: ["verticalStackData", "inputcell", "inputfullname"],
  inputcell: ["inputcell"],
  inputfullname: ["inputfullname"],
  verticalStackFunction: [
    "verticalStackFunction",
    "freeturnBook",
    "preferBooktime2"
  ],

  freeturnBook: ["freeturnBook"],
  preferBooktime2: ["preferBooktime2"],
  preferBooktime: ["preferBooktime", "\u062a\u0642\u0648\u0645", "datePicker"],
  تقوم: ["\u062a\u0642\u0648\u0645", "datePicker"],
  datePicker: ["datePicker"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmicافزودنبمار__ArgProps,
          internalVariantPropNames: Plasmicافزودنبمار__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmicافزودنبمار__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName =
      "Plasmic\u0627\u0641\u0632\u0648\u062f\u0646\u0628\u0645\u0627\u0631";
  } else {
    func.displayName = `Plasmicافزودنبمار.${nodeName}`;
  }
  return func;
}

export const Plasmicافزودنبمار = Object.assign(
  // Top-level Plasmicافزودنبمار renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nationalCode: makeNodeComponent("nationalCode"),
    booktime: makeNodeComponent("booktime"),
    verticalStackData: makeNodeComponent("verticalStackData"),
    inputcell: makeNodeComponent("inputcell"),
    inputfullname: makeNodeComponent("inputfullname"),
    verticalStackFunction: makeNodeComponent("verticalStackFunction"),
    freeturnBook: makeNodeComponent("freeturnBook"),
    preferBooktime2: makeNodeComponent("preferBooktime2"),
    preferBooktime: makeNodeComponent("preferBooktime"),
    تقوم: makeNodeComponent("\u062a\u0642\u0648\u0645"),
    datePicker: makeNodeComponent("datePicker"),
    // Metadata about props expected for Plasmicافزودنبمار
    internalVariantProps: Plasmicافزودنبمار__VariantProps,
    internalArgProps: Plasmicافزودنبمار__ArgProps
  }
);

export default Plasmicافزودنبمار;
/* prettier-ignore-end */
