// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxImportSource @plasmicapp/react-web-runtime */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rqmTJ9WSF4RQaQFCvo2iUX
// Component: V1gAPdcbOPOO
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  initializePlasmicStates,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv, useGlobalActions } from "@plasmicapp/react-web/lib/host";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Workhours from "../../Workhours"; // plasmic-import: 2yLCE-L6JXEZ/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rqmTJ9WSF4RQaQFCvo2iUX/projectcss
import sty from "./PlasmicHoursDaysOfWeek.module.css"; // plasmic-import: V1gAPdcbOPOO/css
import __fn_splunkEvent from "@paziresh24/apps/drapp/fragment/plasmicSplunkEvent"; // plasmic-import: splunkEvent/customFunction

export const PlasmicHoursDaysOfWeek__VariantProps = new Array();

export const PlasmicHoursDaysOfWeek__ArgProps = new Array(
  "centerId",
  "userCenterId"
);

const $$ = {
  splunkEvent: __fn_splunkEvent
};

function PlasmicHoursDaysOfWeek__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const $globalActions = useGlobalActions?.();
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "duration",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "workhours[].listOfWorkhoureCopy",
        type: "private",
        variableType: "array"
      },
      {
        path: "days",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { id: 6, name: "\u0634\u0646\u0628\u0647", nameEn: "Saturday" },
          {
            id: 7,
            name: "\u06cc\u06a9\u0634\u0646\u0628\u0647",
            nameEn: "Sunday"
          },
          {
            id: 1,
            name: "\u062f\u0648\u0634\u0646\u0628\u0647",
            nameEn: "Monday"
          },
          {
            id: 2,
            name: "\u0633\u0647\u200c\u0634\u0646\u0628\u0647",
            nameEn: "Tuesday"
          },
          {
            id: 3,
            name: "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647",
            nameEn: "Wednesday"
          },
          {
            id: 4,
            name: "\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647",
            nameEn: "Thursday"
          },
          { id: 5, name: "\u062c\u0645\u0639\u0647", nameEn: "Friday" }
        ]
      },
      {
        path: "workhours[].checkboxIsChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "workhours[].warning",
        type: "private",
        variableType: "text"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};
          $steps["getWorkhours"] = true
            ? (() => {
                const actionArgs = {
                  args: [
                    "GET",
                    "https://api.paziresh24.com/V1/doctor/center/workhours",
                    (() => {
                      try {
                        return { center_id: $props.centerId };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["getWorkhours"] != null &&
            typeof $steps["getWorkhours"] === "object" &&
            typeof $steps["getWorkhours"].then === "function"
          ) {
            $steps["getWorkhours"] = await $steps["getWorkhours"];
          }
          $steps["updateDuration"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["duration"]
                  },
                  operation: 0,
                  value: $steps.getWorkhours.data
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;
                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateDuration"] != null &&
            typeof $steps["updateDuration"] === "object" &&
            typeof $steps["updateDuration"].then === "function"
          ) {
            $steps["updateDuration"] = await $steps["updateDuration"];
          }
        }}
      />

      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $state.days;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (() => {
          const child$Props = {
            checkboxIsChecked: generateStateValueProp($state, [
              "workhours",
              __plasmic_idx_0,
              "checkboxIsChecked"
            ]),
            className: classNames("__wab_instance", sty.workhours),
            dayOfWeek: (() => {
              try {
                return currentItem.id;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })(),
            duration: (() => {
              try {
                return $state.duration.data.duration;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })(),
            endedSelectedDay: async id => {
              const $steps = {};
              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const x = JSON.stringify(
                            $state.workhours[currentIndex].listOfWorkhoureCopy
                          );
                          return id.forEach(day => {
                            $state.workhours[
                              $state.days.findIndex(item => item.id == day)
                            ].listOfWorkhoureCopy = JSON.parse(x);
                            $state.workhours[
                              $state.days.findIndex(item => item.id == day)
                            ].checkboxIsChecked = true;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            },
            key: currentIndex,
            listOfWorkhoureCopy: generateStateValueProp($state, [
              "workhours",
              __plasmic_idx_0,
              "listOfWorkhoureCopy"
            ]),
            onCheckboxIsCheckedChange: generateStateOnChangeProp($state, [
              "workhours",
              __plasmic_idx_0,
              "checkboxIsChecked"
            ]),
            onListOfWorkhoureCopyChange: generateStateOnChangeProp($state, [
              "workhours",
              __plasmic_idx_0,
              "listOfWorkhoureCopy"
            ]),
            onWarningChange: generateStateOnChangeProp($state, [
              "workhours",
              __plasmic_idx_0,
              "warning"
            ])
          };
          initializePlasmicStates(
            $state,
            [
              {
                name: "workhours[].listOfWorkhoureCopy",
                initFunc: ({ $props, $state, $queries }) =>
                  (() => {
                    try {
                      return $state.duration.data.workhours.some(
                        item => item.day === currentItem.id
                      )
                        ? $state.duration.data.workhours
                            .filter(item => item.day === currentItem.id)
                            .map(item => ({ from: item.from, to: item.to }))
                        : [
                            {
                              from: "18:00",
                              to: "21:00"
                            }
                          ];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [{ from: "18:00", to: "21:00" }];
                      }
                      throw e;
                    }
                  })()
              },
              {
                name: "workhours[].checkboxIsChecked",
                initFunc: ({ $props, $state, $queries }) =>
                  (() => {
                    try {
                      return $state.duration?.data?.workhours?.some?.(
                        item => item.day === currentItem.id
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
              }
            ],

            [__plasmic_idx_0]
          );
          return (
            <Workhours
              data-plasmic-name={"workhours"}
              data-plasmic-override={overrides.workhours}
              {...child$Props}
            />
          );
        })();
      })}
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        children2={
          "\u0630\u062e\u06cc\u0631\u0647 \u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc"
        }
        className={classNames("__wab_instance", sty.button)}
        onClick={async event => {
          const $steps = {};
          $steps["runCode5"] = $state.workhours.some(
            wh => wh.checkboxIsChecked && wh.warning
          )
            ? (() => {
                const actionArgs = {
                  args: [
                    "error",
                    "\u0633\u0627\u0639\u0627\u062a \u0628\u0627 \u06cc\u06a9\u062f\u06cc\u06af\u0631 \u0647\u0645\u200c\u067e\u0648\u0634\u0627\u0646\u06cc \u062f\u0627\u0631\u0646\u062f."
                  ]
                };
                return $globalActions["Fragment.showToast"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["runCode5"] != null &&
            typeof $steps["runCode5"] === "object" &&
            typeof $steps["runCode5"].then === "function"
          ) {
            $steps["runCode5"] = await $steps["runCode5"];
          }
          $steps["saveWorkhours"] = $state.workhours.every(wh =>
            wh.checkboxIsChecked ? !wh.warning : true
          )
            ? (() => {
                const actionArgs = {
                  args: [
                    "POST",
                    "https://api.paziresh24.com/V1/doctor/center/workhours",
                    undefined,
                    (() => {
                      try {
                        return {
                          center_id: $props.centerId,
                          cost: 0,
                          duration: $state.duration.data.duration,
                          workHours: $state.workhours
                            .map((day, index) =>
                              day.checkboxIsChecked === true
                                ? day.listOfWorkhoureCopy.map(workhour => {
                                    return {
                                      day: $state.days[index].id,
                                      from: workhour.from,
                                      to: workhour.to
                                    };
                                  })
                                : false
                            )
                            .flat()
                            .filter(item => item != false)
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["saveWorkhours"] != null &&
            typeof $steps["saveWorkhours"] === "object" &&
            typeof $steps["saveWorkhours"].then === "function"
          ) {
            $steps["saveWorkhours"] = await $steps["saveWorkhours"];
          }
          $steps["runCode3"] =
            $steps.saveWorkhours.data.status === "SUCCESS" &&
            $state.workhours.every(wh =>
              wh.checkboxIsChecked ? !wh.warning : true
            )
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "\u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f."
                    ]
                  };
                  return $globalActions["Fragment.showToast"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
          if (
            $steps["runCode3"] != null &&
            typeof $steps["runCode3"] === "object" &&
            typeof $steps["runCode3"].then === "function"
          ) {
            $steps["runCode3"] = await $steps["runCode3"];
          }
          $steps["runCode4"] =
            $steps.saveWorkhours.data.status != "SUCCESS"
              ? (() => {
                  const actionArgs = {
                    args: [
                      "error",
                      "\u062f\u0631 \u062b\u0628\u062a \u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc \u0628\u0627 \u062e\u0637\u0627 \u0645\u0648\u0627\u062c\u0647 \u0647\u0633\u062a\u06cc\u062f."
                    ]
                  };
                  return $globalActions["Fragment.showToast"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
          if (
            $steps["runCode4"] != null &&
            typeof $steps["runCode4"] === "object" &&
            typeof $steps["runCode4"].then === "function"
          ) {
            $steps["runCode4"] = await $steps["runCode4"];
          }
          $steps["runCode6"] =
            $steps.saveWorkhours.data.status === "SUCCESS" &&
            $state.workhours.every(wh =>
              wh.checkboxIsChecked ? !wh.warning : true
            )
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return $$.splunkEvent({
                        token: "6d18640a-95c3-4368-a8d0-dc0beae3a44b",
                        group: "dr-app-workhour",
                        data: {},
                        type: "successful"
                      });
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["runCode6"] != null &&
            typeof $steps["runCode6"] === "object" &&
            typeof $steps["runCode6"].then === "function"
          ) {
            $steps["runCode6"] = await $steps["runCode6"];
          }
          $steps["runCode7"] =
            $steps.saveWorkhours.data.status != "SUCCESS"
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return $$.splunkEvent({
                        token: "6d18640a-95c3-4368-a8d0-dc0beae3a44b",
                        group: "dr-app-workhour",
                        data: {},
                        type: "unsuccessful"
                      });
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["runCode7"] != null &&
            typeof $steps["runCode7"] === "object" &&
            typeof $steps["runCode7"].then === "function"
          ) {
            $steps["runCode7"] = await $steps["runCode7"];
          }
        }}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "sideEffect", "workhours", "button"],
  sideEffect: ["sideEffect"],
  workhours: ["workhours"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHoursDaysOfWeek__ArgProps,
          internalVariantPropNames: PlasmicHoursDaysOfWeek__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHoursDaysOfWeek__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHoursDaysOfWeek";
  } else {
    func.displayName = `PlasmicHoursDaysOfWeek.${nodeName}`;
  }
  return func;
}

export const PlasmicHoursDaysOfWeek = Object.assign(
  // Top-level PlasmicHoursDaysOfWeek renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    workhours: makeNodeComponent("workhours"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicHoursDaysOfWeek
    internalVariantProps: PlasmicHoursDaysOfWeek__VariantProps,
    internalArgProps: PlasmicHoursDaysOfWeek__ArgProps
  }
);

export default PlasmicHoursDaysOfWeek;
/* prettier-ignore-end */
