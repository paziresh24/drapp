// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rqmTJ9WSF4RQaQFCvo2iUX
// Component: -iBTMaXovDap

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../paziresh_24_design_system/plasmic_paziresh_24_design_system.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rqmTJ9WSF4RQaQFCvo2iUX/projectcss
import sty from "./Plasmicدمهتماسامن.module.css"; // plasmic-import: -iBTMaXovDap/css

import ChevronRightIcon from "../paziresh_24_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../paziresh_24_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type Plasmicدمهتماسامن__VariantMembers = {};
export type Plasmicدمهتماسامن__VariantsArgs = {};
type VariantPropType = keyof Plasmicدمهتماسامن__VariantsArgs;
export const Plasmicدمهتماسامن__VariantProps = new Array<VariantPropType>();

export type Plasmicدمهتماسامن__ArgsType = {
  onclick?: () => void;
};
type ArgPropType = keyof Plasmicدمهتماسامن__ArgsType;
export const Plasmicدمهتماسامن__ArgProps = new Array<ArgPropType>("onclick");

export type Plasmicدمهتماسامن__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultدمهتماسامنProps {
  onclick?: () => void;
  className?: string;
}

const $$ = {};

function Plasmicدمهتماسامن__RenderFunc(props: {
  variants: Plasmicدمهتماسامن__VariantsArgs;
  args: Plasmicدمهتماسامن__ArgsType;
  overrides: Plasmicدمهتماسامن__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
      onClick={async event => {
        const $steps = {};

        $steps["runOnclick"] = true
          ? (() => {
              const actionArgs = { eventRef: $props["onclick"] };
              return (({ eventRef, args }) => {
                return eventRef?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runOnclick"] != null &&
          typeof $steps["runOnclick"] === "object" &&
          typeof $steps["runOnclick"].then === "function"
        ) {
          $steps["runOnclick"] = await $steps["runOnclick"];
        }
      }}
    >
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        children2={"\u062a\u0645\u0627\u0633 \u0627\u0645\u0646"}
        className={classNames("__wab_instance", sty.button)}
        endIcon={
          <ChevronLeftIcon
            className={classNames(projectcss.all, sty.svg__cPezs)}
            role={"img"}
          />
        }
        onClick={async event => {
          const $steps = {};

          $steps["runOnclick"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["onclick"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnclick"] != null &&
            typeof $steps["runOnclick"] === "object" &&
            typeof $steps["runOnclick"].then === "function"
          ) {
            $steps["runOnclick"] = await $steps["runOnclick"];
          }
        }}
        outline={true}
        startIcon={
          <ChevronRightIcon
            className={classNames(projectcss.all, sty.svg__lbUtg)}
            role={"img"}
          />
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmicدمهتماسامن__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmicدمهتماسامن__VariantsArgs;
    args?: Plasmicدمهتماسامن__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmicدمهتماسامن__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmicدمهتماسامن__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmicدمهتماسامن__ArgProps,
          internalVariantPropNames: Plasmicدمهتماسامن__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmicدمهتماسامن__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName =
      "Plasmic\u062f\u0645\u0647\u062a\u0645\u0627\u0633\u0627\u0645\u0646";
  } else {
    func.displayName = `Plasmicدمهتماسامن.${nodeName}`;
  }
  return func;
}

export const Plasmicدمهتماسامن = Object.assign(
  // Top-level Plasmicدمهتماسامن renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),

    // Metadata about props expected for Plasmicدمهتماسامن
    internalVariantProps: Plasmicدمهتماسامن__VariantProps,
    internalArgProps: Plasmicدمهتماسامن__ArgProps
  }
);

export default Plasmicدمهتماسامن;
/* prettier-ignore-end */
