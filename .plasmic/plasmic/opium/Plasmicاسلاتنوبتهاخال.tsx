// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rqmTJ9WSF4RQaQFCvo2iUX
// Component: ci4bkEJ4_oQw

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../paziresh_24_design_system/plasmic_paziresh_24_design_system.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rqmTJ9WSF4RQaQFCvo2iUX/projectcss
import sty from "./Plasmicاسلاتنوبتهاخال.module.css"; // plasmic-import: ci4bkEJ4_oQw/css

createPlasmicElementProxy;

export type Plasmicاسلاتنوبتهاخال__VariantMembers = {};
export type Plasmicاسلاتنوبتهاخال__VariantsArgs = {};
type VariantPropType = keyof Plasmicاسلاتنوبتهاخال__VariantsArgs;
export const Plasmicاسلاتنوبتهاخال__VariantProps = new Array<VariantPropType>();

export type Plasmicاسلاتنوبتهاخال__ArgsType = {
  centerId?: string;
  userCenterId?: string;
  serviceId?: string;
};
type ArgPropType = keyof Plasmicاسلاتنوبتهاخال__ArgsType;
export const Plasmicاسلاتنوبتهاخال__ArgProps = new Array<ArgPropType>(
  "centerId",
  "userCenterId",
  "serviceId"
);

export type Plasmicاسلاتنوبتهاخال__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultاسلاتنوبتهاخالProps {
  centerId?: string;
  userCenterId?: string;
  serviceId?: string;
  className?: string;
}

const $$ = {};

function Plasmicاسلاتنوبتهاخال__RenderFunc(props: {
  variants: Plasmicاسلاتنوبتهاخال__VariantsArgs;
  args: Plasmicاسلاتنوبتهاخال__ArgsType;
  overrides: Plasmicاسلاتنوبتهاخال__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "bookdate",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__sx4Kl)}>
        <div className={classNames(projectcss.all, sty.freeBox__rpBeo)}>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    const url = `https://apigw.paziresh24.com/v2/freeturns?center_id=${$props.centerId}&user_center_id=${$props.userCenterId}&service_id=${$props.serviceId}&from=${$state.bookdate[0].data.result[0].from}`;
                    return fetch(url)
                      .then(response => response.json())
                      .then(data => ($state.bookdate = data));
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "15:35";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmicاسلاتنوبتهاخال__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmicاسلاتنوبتهاخال__VariantsArgs;
    args?: Plasmicاسلاتنوبتهاخال__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmicاسلاتنوبتهاخال__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      Plasmicاسلاتنوبتهاخال__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: Plasmicاسلاتنوبتهاخال__ArgProps,
          internalVariantPropNames: Plasmicاسلاتنوبتهاخال__VariantProps
        }),
      [props, nodeName]
    );
    return Plasmicاسلاتنوبتهاخال__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName =
      "Plasmic\u0627\u0633\u0644\u0627\u062a\u0646\u0648\u0628\u062a\u0647\u0627\u062e\u0627\u0644";
  } else {
    func.displayName = `Plasmicاسلاتنوبتهاخال.${nodeName}`;
  }
  return func;
}

export const Plasmicاسلاتنوبتهاخال = Object.assign(
  // Top-level Plasmicاسلاتنوبتهاخال renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for Plasmicاسلاتنوبتهاخال
    internalVariantProps: Plasmicاسلاتنوبتهاخال__VariantProps,
    internalArgProps: Plasmicاسلاتنوبتهاخال__ArgProps
  }
);

export default Plasmicاسلاتنوبتهاخال;
/* prettier-ignore-end */
