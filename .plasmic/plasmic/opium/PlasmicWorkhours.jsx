// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxImportSource @plasmicapp/react-web-runtime */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rqmTJ9WSF4RQaQFCvo2iUX
// Component: 2yLCE-L6JXEZ
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  get as $stateGet,
  initializeCodeComponentStates,
  initializePlasmicStates,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Checkbox from "../../Checkbox"; // plasmic-import: WT38Ke_Z_eCs/component
import Select from "../../Select"; // plasmic-import: OzXPMxUo1TiP/component
import { Popover } from "@plasmicpkgs/radix-ui";
import DaysOfWeek from "../../DaysOfWeek"; // plasmic-import: oTc6QTbblo0F/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rqmTJ9WSF4RQaQFCvo2iUX/projectcss
import sty from "./PlasmicWorkhours.module.css"; // plasmic-import: 2yLCE-L6JXEZ/css
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 9z2THf0LJcnY/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: ep-N6UwP60oB/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: j_DyRtM8QKgI/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: l5BVq9QEthSF/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: D-8MfLPQxHwG/icon

export const PlasmicWorkhours__VariantProps = new Array();

export const PlasmicWorkhours__ArgProps = new Array(
  "checkboxIsChecked",
  "onCheckboxIsCheckedChange",
  "centerId",
  "listOfWorkhoureCopy",
  "onListOfWorkhoureCopyChange",
  "duration",
  "dayOfWeek",
  "endedSelectedDay",
  "onWarningChange"
);

const $$ = {};

function PlasmicWorkhours__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "checkbox.isChecked",
        type: "writable",
        variableType: "boolean",
        valueProp: "checkboxIsChecked",
        onChangeProp: "onCheckboxIsCheckedChange"
      },
      {
        path: "to[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "from[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "popoverCore[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "selectedhoure",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "listOfWorkhoureCopy",
        type: "writable",
        variableType: "array",
        valueProp: "listOfWorkhoureCopy",
        onChangeProp: "onListOfWorkhoureCopyChange"
      },
      {
        path: "days",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { id: 6, name: "\u0634\u0646\u0628\u0647", nameEn: "Saturday" },
          {
            id: 7,
            name: "\u06cc\u06a9\u0634\u0646\u0628\u0647",
            nameEn: "Sunday"
          },
          {
            id: 1,
            name: "\u062f\u0648\u0634\u0646\u0628\u0647",
            nameEn: "Monday"
          },
          {
            id: 2,
            name: "\u0633\u0647\u200c\u0634\u0646\u0628\u0647",
            nameEn: "Tuesday"
          },
          {
            id: 3,
            name: "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647",
            nameEn: "Wednesday"
          },
          {
            id: 4,
            name: "\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647",
            nameEn: "Thursday"
          },
          { id: 5, name: "\u062c\u0645\u0639\u0647", nameEn: "Friday" }
        ]
      },
      {
        path: "popoverConflictHour[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "warning",
        type: "readonly",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        onChangeProp: "onWarningChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__gc4JJ)}>
        <Checkbox
          data-plasmic-name={"checkbox"}
          data-plasmic-override={overrides.checkbox}
          className={classNames("__wab_instance", sty.checkbox)}
          isChecked={
            generateStateValueProp($state, ["checkbox", "isChecked"]) ?? false
          }
          onChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["checkbox", "isChecked"])(
              eventArgs[0]
            );
          }}
        >
          <React.Fragment>
            {(() => {
              try {
                return $state.days.find(day => day.id === $props.dayOfWeek)
                  .name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u0634\u0646\u0628\u0647";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </Checkbox>
        <div className={classNames(projectcss.all, sty.freeBox__rz8Wp)} />
      </div>
      {(() => {
        try {
          return $state.checkbox.isChecked === true;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })()
        ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.listOfWorkhoureCopy;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__syBra)}
                key={currentIndex}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.to),
                    onChange: async (...eventArgs) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "to",
                          __plasmic_idx_0,
                          "value"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);
                      (async value => {
                        const $steps = {};
                        $steps["updateListOfWorkhoureCopy"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["listOfWorkhoureCopy"]
                                },
                                operation: 0,
                                value: (() => {
                                  let list = $state.listOfWorkhoureCopy;
                                  list[currentIndex].to =
                                    $state.to[currentIndex].value;
                                  return list;
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateListOfWorkhoureCopy"] != null &&
                          typeof $steps["updateListOfWorkhoureCopy"] ===
                            "object" &&
                          typeof $steps["updateListOfWorkhoureCopy"].then ===
                            "function"
                        ) {
                          $steps["updateListOfWorkhoureCopy"] = await $steps[
                            "updateListOfWorkhoureCopy"
                          ];
                        }
                      }).apply(null, eventArgs);
                    },
                    options: (() => {
                      try {
                        return (() => {
                          const duration = $props.duration;
                          const options = [];
                          const initialHour = 21;
                          for (let i = 1; i <= 24; i++) {
                            const totalMinutes =
                              initialHour * 60 + i * duration;
                            const hour = Math.floor(totalMinutes / 60) % 24;
                            const minute = totalMinutes % 60;
                            const formattedHour = `${
                              hour < 10 ? "0" : ""
                            }${hour}`;
                            const formattedMinute = `${
                              minute < 10 ? "0" : ""
                            }${minute}`;
                            options.push(`${formattedHour}:${formattedMinute}`);
                          }
                          return options;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            { value: "option1", label: "Option 1" },
                            { value: "option2", label: "Option 2" }
                          ];
                        }
                        throw e;
                      }
                    })(),
                    placeholder: "\u06f2\u06f1:\u06f0\u06f0",
                    value: generateStateValueProp($state, [
                      "to",
                      __plasmic_idx_0,
                      "value"
                    ])
                  };
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "to[].value",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.to;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      }
                    ],

                    [__plasmic_idx_0]
                  );
                  return (
                    <Select
                      data-plasmic-name={"to"}
                      data-plasmic-override={overrides.to}
                      {...child$Props}
                    />
                  );
                })()}
                <Icon6Icon
                  className={classNames(projectcss.all, sty.svg__e7USu)}
                  role={"img"}
                />

                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.from),
                    onChange: async (...eventArgs) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "from",
                          __plasmic_idx_0,
                          "value"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);
                      (async value => {
                        const $steps = {};
                        $steps["updateListOfWorkhoureCopy"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["listOfWorkhoureCopy"]
                                },
                                operation: 0,
                                value: (() => {
                                  let list = $state.listOfWorkhoureCopy;
                                  list[currentIndex].from =
                                    $state.from[currentIndex].value;
                                  return list;
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateListOfWorkhoureCopy"] != null &&
                          typeof $steps["updateListOfWorkhoureCopy"] ===
                            "object" &&
                          typeof $steps["updateListOfWorkhoureCopy"].then ===
                            "function"
                        ) {
                          $steps["updateListOfWorkhoureCopy"] = await $steps[
                            "updateListOfWorkhoureCopy"
                          ];
                        }
                      }).apply(null, eventArgs);
                    },
                    options: (() => {
                      try {
                        return (() => {
                          const duration = $props.duration;
                          const options = [];
                          const initialHour = 17;
                          for (let i = 1; i <= 24; i++) {
                            const totalMinutes =
                              initialHour * 60 + i * duration;
                            const hour = Math.floor(totalMinutes / 60) % 24;
                            const minute = totalMinutes % 60;
                            const formattedHour = `${
                              hour < 10 ? "0" : ""
                            }${hour}`;
                            const formattedMinute = `${
                              minute < 10 ? "0" : ""
                            }${minute}`;
                            options.push(`${formattedHour}:${formattedMinute}`);
                          }
                          return options;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })(),
                    placeholder: "\u06f1\u06f7:\u06f0\u06f0",
                    value: generateStateValueProp($state, [
                      "from",
                      __plasmic_idx_0,
                      "value"
                    ])
                  };
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "from[].value",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return currentItem.from;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      }
                    ],

                    [__plasmic_idx_0]
                  );
                  return (
                    <Select
                      data-plasmic-name={"from"}
                      data-plasmic-override={overrides.from}
                      {...child$Props}
                    />
                  );
                })()}
                {(() => {
                  try {
                    return currentIndex === 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon2Icon
                    className={classNames(projectcss.all, sty.svg__mj5V1)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateListOfWorkhoureCopy"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["listOfWorkhoureCopy"]
                              },
                              operation: 5,
                              value: {
                                from: $state.to[
                                  $state.listOfWorkhoureCopy.length - 1
                                ].value,
                                to: (() => {
                                  const toValue =
                                    $state.to[
                                      $state.listOfWorkhoureCopy.length - 1
                                    ].value;
                                  const duration = $props.duration;
                                  const newTime = new Date(
                                    `2000-01-01T${toValue}`
                                  );
                                  newTime.setMinutes(
                                    newTime.getMinutes() + duration
                                  );
                                  return newTime.toLocaleTimeString("en-Gb", {
                                    hour12: false,
                                    hour: "2-digit",
                                    minute: "2-digit"
                                  });
                                })()
                              }
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              const arr = $stateGet(objRoot, variablePath);
                              arr.push(value);
                              return arr;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateListOfWorkhoureCopy"] != null &&
                        typeof $steps["updateListOfWorkhoureCopy"] ===
                          "object" &&
                        typeof $steps["updateListOfWorkhoureCopy"].then ===
                          "function"
                      ) {
                        $steps["updateListOfWorkhoureCopy"] = await $steps[
                          "updateListOfWorkhoureCopy"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                ) : null}
                {(() => {
                  try {
                    return currentIndex !== 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon5Icon
                    className={classNames(projectcss.all, sty.svg__mlgMh)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateListOfWorkhoureCopy"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["listOfWorkhoureCopy"]
                              },
                              operation: 6,
                              startIndex: (() => {
                                try {
                                  return currentIndex;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              deleteCount: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              const arr = $stateGet(objRoot, variablePath);
                              arr.splice(startIndex, deleteCount);
                              return arr;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateListOfWorkhoureCopy"] != null &&
                        typeof $steps["updateListOfWorkhoureCopy"] ===
                          "object" &&
                        typeof $steps["updateListOfWorkhoureCopy"].then ===
                          "function"
                      ) {
                        $steps["updateListOfWorkhoureCopy"] = await $steps[
                          "updateListOfWorkhoureCopy"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                ) : null}
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.popoverCore),
                    onOpenChange: generateStateOnChangeProp($state, [
                      "popoverCore",
                      __plasmic_idx_0,
                      "open"
                    ]),
                    open: generateStateValueProp($state, [
                      "popoverCore",
                      __plasmic_idx_0,
                      "open"
                    ]),
                    overlay: (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__d9Vk8
                        )}
                      >
                        <DaysOfWeek
                          data-plasmic-name={"daysOfWeek"}
                          data-plasmic-override={overrides.daysOfWeek}
                          className={classNames(
                            "__wab_instance",
                            sty.daysOfWeek
                          )}
                          selectTrigger={async days => {
                            const $steps = {};
                            $steps["runEndedSelectedDay"] = true
                              ? (() => {
                                  const actionArgs = {
                                    eventRef: $props["endedSelectedDay"],
                                    args: [
                                      (() => {
                                        try {
                                          return days;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return (({ eventRef, args }) => {
                                    return eventRef?.(...(args ?? []));
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runEndedSelectedDay"] != null &&
                              typeof $steps["runEndedSelectedDay"] ===
                                "object" &&
                              typeof $steps["runEndedSelectedDay"].then ===
                                "function"
                            ) {
                              $steps["runEndedSelectedDay"] = await $steps[
                                "runEndedSelectedDay"
                              ];
                            }
                            $steps["updatePopoverCore0Open"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["popoverCore", "0", "open"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;
                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updatePopoverCore0Open"] != null &&
                              typeof $steps["updatePopoverCore0Open"] ===
                                "object" &&
                              typeof $steps["updatePopoverCore0Open"].then ===
                                "function"
                            ) {
                              $steps["updatePopoverCore0Open"] = await $steps[
                                "updatePopoverCore0Open"
                              ];
                            }
                          }}
                          selectedDay={(() => {
                            try {
                              return $props.dayOfWeek;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                    ),

                    themeResetClass: classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_fragment_design_system_css.plasmic_tokens
                    )
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "open",
                        plasmicStateName: "popoverCore[].open"
                      }
                    ],

                    [__plasmic_idx_0],
                    undefined ?? {},
                    child$Props
                  );
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "popoverCore[].open",
                        initFunc: ({ $props, $state, $queries }) => undefined
                      }
                    ],

                    [__plasmic_idx_0]
                  );
                  return (
                    <Popover
                      data-plasmic-name={"popoverCore"}
                      data-plasmic-override={overrides.popoverCore}
                      {...child$Props}
                    >
                      {(() => {
                        try {
                          return currentIndex === 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ouXTe
                          )}
                        >
                          <Icon3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__uCtJt
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </Popover>
                  );
                })()}
                {(() => {
                  const child$Props = {
                    className: classNames(
                      "__wab_instance",
                      sty.popoverConflictHour
                    ),
                    onOpenChange: generateStateOnChangeProp($state, [
                      "popoverConflictHour",
                      __plasmic_idx_0,
                      "open"
                    ]),
                    open: generateStateValueProp($state, [
                      "popoverConflictHour",
                      __plasmic_idx_0,
                      "open"
                    ]),
                    overlay: (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zgb0A
                        )}
                      >
                        <div
                          data-plasmic-name={"text"}
                          data-plasmic-override={overrides.text}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text
                          )}
                        >
                          {
                            "\u0633\u0627\u0639\u0627\u062a \u0628\u0627 \u06cc\u06a9\u062f\u06cc\u06af\u0631 \u0647\u0645\u200c\u067e\u0648\u0634\u0627\u0646\u06cc \u062f\u0627\u0631\u062f."
                          }
                        </div>
                      </div>
                    ),

                    themeResetClass: classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_fragment_design_system_css.plasmic_tokens
                    )
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "open",
                        plasmicStateName: "popoverConflictHour[].open"
                      }
                    ],

                    [__plasmic_idx_0],
                    undefined ?? {},
                    child$Props
                  );
                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "popoverConflictHour[].open",
                        initFunc: ({ $props, $state, $queries }) => undefined
                      }
                    ],

                    [__plasmic_idx_0]
                  );
                  return (
                    <Popover
                      data-plasmic-name={"popoverConflictHour"}
                      data-plasmic-override={overrides.popoverConflictHour}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sgEi
                        )}
                      >
                        {(() => {
                          try {
                            return ($state.warning =
                              $state.listOfWorkhoureCopy.some((item, index) =>
                                index !== currentIndex
                                  ? (new Date(
                                      `2000-01-01T${currentItem.from}:00`
                                    ).getTime() >=
                                      new Date(
                                        `2000-01-01T${item.from}:00`
                                      ).getTime() &&
                                      new Date(
                                        `2000-01-01T${currentItem.from}:00`
                                      ).getTime() <
                                        new Date(
                                          `2000-01-01T${item.to}:00`
                                        ).getTime()) ||
                                    (new Date(
                                      `2000-01-01T${currentItem.to}:00`
                                    ).getTime() >
                                      new Date(
                                        `2000-01-01T${item.from}:00`
                                      ).getTime() &&
                                      new Date(
                                        `2000-01-01T${currentItem.to}:00`
                                      ).getTime() <=
                                        new Date(
                                          `2000-01-01T${item.to}:00`
                                        ).getTime())
                                  : item.from === item.to
                              ));
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Icon7Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__mtbNp
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    </Popover>
                  );
                })()}
              </Stack__>
            );
          })
        : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "checkbox",
    "to",
    "from",
    "popoverCore",
    "daysOfWeek",
    "popoverConflictHour",
    "text"
  ],

  checkbox: ["checkbox"],
  to: ["to"],
  from: ["from"],
  popoverCore: ["popoverCore", "daysOfWeek"],
  daysOfWeek: ["daysOfWeek"],
  popoverConflictHour: ["popoverConflictHour", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicWorkhours__ArgProps,
          internalVariantPropNames: PlasmicWorkhours__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWorkhours__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWorkhours";
  } else {
    func.displayName = `PlasmicWorkhours.${nodeName}`;
  }
  return func;
}

export const PlasmicWorkhours = Object.assign(
  // Top-level PlasmicWorkhours renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkbox: makeNodeComponent("checkbox"),
    to: makeNodeComponent("to"),
    from: makeNodeComponent("from"),
    popoverCore: makeNodeComponent("popoverCore"),
    daysOfWeek: makeNodeComponent("daysOfWeek"),
    popoverConflictHour: makeNodeComponent("popoverConflictHour"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicWorkhours
    internalVariantProps: PlasmicWorkhours__VariantProps,
    internalArgProps: PlasmicWorkhours__ArgProps
  }
);

export default PlasmicWorkhours;
/* prettier-ignore-end */
