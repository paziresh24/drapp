// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxImportSource @plasmicapp/react-web-runtime */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rqmTJ9WSF4RQaQFCvo2iUX
// Component: -iBTMaXovDap
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rqmTJ9WSF4RQaQFCvo2iUX/projectcss
import sty from "./PlasmicSafeCall.module.css"; // plasmic-import: -iBTMaXovDap/css
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

export const PlasmicSafeCall__VariantProps = new Array();

export const PlasmicSafeCall__ArgProps = new Array("onclick");

const $$ = {};

function PlasmicSafeCall__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
      onClick={async event => {
        const $steps = {};
        $steps["runOnclick"] = true
          ? (() => {
              const actionArgs = { eventRef: $props["onclick"] };
              return (({ eventRef, args }) => {
                return eventRef?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runOnclick"] != null &&
          typeof $steps["runOnclick"] === "object" &&
          typeof $steps["runOnclick"].then === "function"
        ) {
          $steps["runOnclick"] = await $steps["runOnclick"];
        }
      }}
    >
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        children2={"\u062a\u0645\u0627\u0633 \u0627\u0645\u0646"}
        className={classNames("__wab_instance", sty.button)}
        endIcon={
          <ChevronLeftIcon
            className={classNames(projectcss.all, sty.svg__cPezs)}
            role={"img"}
          />
        }
        onClick={async event => {
          const $steps = {};
          $steps["runOnclick"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["onclick"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnclick"] != null &&
            typeof $steps["runOnclick"] === "object" &&
            typeof $steps["runOnclick"].then === "function"
          ) {
            $steps["runOnclick"] = await $steps["runOnclick"];
          }
        }}
        outline={true}
        startIcon={
          <ChevronRightIcon
            className={classNames(projectcss.all, sty.svg__lbUtg)}
            role={"img"}
          />
        }
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSafeCall__ArgProps,
          internalVariantPropNames: PlasmicSafeCall__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSafeCall__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSafeCall";
  } else {
    func.displayName = `PlasmicSafeCall.${nodeName}`;
  }
  return func;
}

export const PlasmicSafeCall = Object.assign(
  // Top-level PlasmicSafeCall renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicSafeCall
    internalVariantProps: PlasmicSafeCall__VariantProps,
    internalArgProps: PlasmicSafeCall__ArgProps
  }
);

export default PlasmicSafeCall;
/* prettier-ignore-end */
