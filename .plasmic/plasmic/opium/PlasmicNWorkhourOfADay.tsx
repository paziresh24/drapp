// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rqmTJ9WSF4RQaQFCvo2iUX
// Component: IdHKNJjJxBs4

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Select from "../../Select"; // plasmic-import: OzXPMxUo1TiP/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../paziresh_24_design_system/plasmic_paziresh_24_design_system.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rqmTJ9WSF4RQaQFCvo2iUX/projectcss
import sty from "./PlasmicNWorkhourOfADay.module.css"; // plasmic-import: IdHKNJjJxBs4/css

import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 9z2THf0LJcnY/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: j_DyRtM8QKgI/icon

createPlasmicElementProxy;

export type PlasmicNWorkhourOfADay__VariantMembers = {
  deleteNewWorkhoure: "deleteNewWorkhoure";
};
export type PlasmicNWorkhourOfADay__VariantsArgs = {
  deleteNewWorkhoure?: SingleBooleanChoiceArg<"deleteNewWorkhoure">;
};
type VariantPropType = keyof PlasmicNWorkhourOfADay__VariantsArgs;
export const PlasmicNWorkhourOfADay__VariantProps = new Array<VariantPropType>(
  "deleteNewWorkhoure"
);

export type PlasmicNWorkhourOfADay__ArgsType = {
  centerId?: string;
};
type ArgPropType = keyof PlasmicNWorkhourOfADay__ArgsType;
export const PlasmicNWorkhourOfADay__ArgProps = new Array<ArgPropType>(
  "centerId"
);

export type PlasmicNWorkhourOfADay__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  freeBox?: Flex__<"div">;
  to?: Flex__<typeof Select>;
  from?: Flex__<typeof Select>;
};

export interface DefaultNWorkhourOfADayProps {
  centerId?: string;
  deleteNewWorkhoure?: SingleBooleanChoiceArg<"deleteNewWorkhoure">;
  className?: string;
}

const $$ = {};

function PlasmicNWorkhourOfADay__RenderFunc(props: {
  variants: PlasmicNWorkhourOfADay__VariantsArgs;
  args: PlasmicNWorkhourOfADay__ArgsType;
  overrides: PlasmicNWorkhourOfADay__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "to.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "from.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deleteNewWorkhoure",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.deleteNewWorkhoure
      },
      {
        path: "duration",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "selectedhoure",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        onMount={async () => {
          const $steps = {};

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return fetch(
                      `https://api.paziresh24.com/V1/doctor/center/workhours?center_id=${$props.centerId}`,
                      {
                        method: "GET",
                        headers: {
                          "Content-Type": "application/json",
                          authorization:
                            "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3AyNGRvY3RvcnMuZGFya3ViZS5hcHAvVjEvYXV0aC9sb2dpbiIsImlhdCI6MTcxMjQwMTMyMywiZXhwIjoxNzIwMTc3MzIzLCJuYmYiOjE3MTI0MDEzMjMsImp0aSI6IkN0N3NKTFJmVGRMb2RiNnEiLCJzdWIiOiIxODg2MDAyIiwibmFtZSI6Itiy2YfYsdmHIiwiZmFtaWx5Ijoi2KfYsdiv2KfZhtuMIiwiZ2VuZGVyIjoiZmVtYWxlIiwicm9sZSI6InVzZXIiLCJrZXkiOiJ1c2VyLWtleSIsIngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsicHJvdmlkZXIiLCJjb25zdW1lciIsInVzZXIiXSwieC1oYXN1cmEtcHJvdmlkZXItaWQiOiIxNDk0MjM4In0.zwJOb38Qk7jMiPFWxQCzqtNiBI-6iElFq5l7mEXXUgk"
                        }
                      }
                    )
                      .then(response => response.json())
                      .then(data => ($state.duration = data));
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      />

      {(
        hasVariant($state, "deleteNewWorkhoure", "deleteNewWorkhoure")
          ? (() => {
              try {
                return $state.deleteNewWorkhoure !== true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : (() => {
              try {
                return $state.deleteNewWorkhoure != true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()
      ) ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxdeleteNewWorkhoure]: hasVariant(
              $state,
              "deleteNewWorkhoure",
              "deleteNewWorkhoure"
            )
          })}
        >
          <Select
            data-plasmic-name={"to"}
            data-plasmic-override={overrides.to}
            className={classNames("__wab_instance", sty.to)}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["to", "value"])(eventArgs[0]);
            }}
            options={(() => {
              try {
                return (() => {
                  const fromValue = $state.from.value;
                  const newTime = new Date(
                    `2000-01-01T${fromValue
                      .replace(/۰/g, "0")
                      .replace(/۱/g, "1")
                      .replace(/۲/g, "2")
                      .replace(/۳/g, "3")
                      .replace(/۴/g, "4")
                      .replace(/۵/g, "5")
                      .replace(/۶/g, "6")
                      .replace(/۷/g, "7")
                      .replace(/۸/g, "8")
                      .replace(/۹/g, "9")}:00`
                  );
                  newTime.setHours(newTime.getHours() + 5);
                  newTime.setHours(
                    newTime.getHours() + $state.duration.data.duration
                  );
                  const options = [];
                  for (let i = 0; i < 24; i++) {
                    const tempTime = new Date(newTime);
                    tempTime.setHours(tempTime.getHours() + i);
                    options.push(
                      tempTime.toLocaleTimeString("fa-IR", {
                        hour: "2-digit",
                        minute: "2-digit"
                      })
                    );
                  }
                  return options;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [
                    { value: "option1", label: "Option 1" },
                    { value: "option2", label: "Option 2" }
                  ];
                }
                throw e;
              }
            })()}
            placeholder={
              <React.Fragment>
                {(() => {
                  try {
                    return $state.from.selected
                      ? $state.from.duration + " "
                      : "۲۳:۵۹";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Select\u2026";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            }
            value={generateStateValueProp($state, ["to", "value"])}
          />

          <Icon6Icon
            className={classNames(projectcss.all, sty.svg___8Vggh)}
            role={"img"}
          />

          <Select
            data-plasmic-name={"from"}
            data-plasmic-override={overrides.from}
            className={classNames("__wab_instance", sty.from)}
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["from", "value"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);
              (async value => {
                const $steps = {};
              }).apply(null, eventArgs);
            }}
            options={(() => {
              try {
                return (() => {
                  const duration = $state.duration.data.duration;
                  const options = [];
                  const initialHour = 17;
                  for (let i = 1; i <= 24; i++) {
                    const totalMinutes = initialHour * 60 + i * duration;
                    const hour = Math.floor(totalMinutes / 60) % 24;
                    const minute = totalMinutes % 60;
                    const formattedHour = `${hour < 10 ? "0" : ""}${hour}`;
                    const formattedMinute = `${
                      minute < 10 ? "0" : ""
                    }${minute}`;
                    options.push(`${formattedHour}:${formattedMinute}`);
                  }
                  return options;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [
                    { value: "option1", label: "Option 1" },
                    { value: "option2", label: "Option 2" }
                  ];
                }
                throw e;
              }
            })()}
            placeholder={
              <React.Fragment>
                {(() => {
                  try {
                    return $state.to.value
                      ? (() => {
                          const toValue = $state.to.value;
                          const duration3 = $state.duration.data.duration3;
                          const newTime = new Date(`2000-01-01T${toValue}`);
                          newTime.setMinutes(newTime.getMinutes() + duration3);
                          return newTime.toLocaleTimeString("fa-IR", {
                            hour: "2-digit",
                            minute: "2-digit"
                          });
                        })()
                      : "۲۱:۰۰";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Select\u2026";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            }
            value={generateStateValueProp($state, ["from", "value"])}
          />

          <Icon5Icon
            className={classNames(projectcss.all, sty.svg__xk1Ui, {
              [sty.svgdeleteNewWorkhoure__xk1UIq0Ib]: hasVariant(
                $state,
                "deleteNewWorkhoure",
                "deleteNewWorkhoure"
              )
            })}
            onClick={async event => {
              const $steps = {};

              $steps["updateDeleteNewWorkhoure"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["deleteNewWorkhoure"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDeleteNewWorkhoure"] != null &&
                typeof $steps["updateDeleteNewWorkhoure"] === "object" &&
                typeof $steps["updateDeleteNewWorkhoure"].then === "function"
              ) {
                $steps["updateDeleteNewWorkhoure"] = await $steps[
                  "updateDeleteNewWorkhoure"
                ];
              }
            }}
            role={"img"}
          />
        </Stack__>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sideEffect", "freeBox", "to", "from"],
  sideEffect: ["sideEffect"],
  freeBox: ["freeBox", "to", "from"],
  to: ["to"],
  from: ["from"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  freeBox: "div";
  to: typeof Select;
  from: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNWorkhourOfADay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNWorkhourOfADay__VariantsArgs;
    args?: PlasmicNWorkhourOfADay__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNWorkhourOfADay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNWorkhourOfADay__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNWorkhourOfADay__ArgProps,
          internalVariantPropNames: PlasmicNWorkhourOfADay__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNWorkhourOfADay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNWorkhourOfADay";
  } else {
    func.displayName = `PlasmicNWorkhourOfADay.${nodeName}`;
  }
  return func;
}

export const PlasmicNWorkhourOfADay = Object.assign(
  // Top-level PlasmicNWorkhourOfADay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    freeBox: makeNodeComponent("freeBox"),
    to: makeNodeComponent("to"),
    from: makeNodeComponent("from"),

    // Metadata about props expected for PlasmicNWorkhourOfADay
    internalVariantProps: PlasmicNWorkhourOfADay__VariantProps,
    internalArgProps: PlasmicNWorkhourOfADay__ArgProps
  }
);

export default PlasmicNWorkhourOfADay;
/* prettier-ignore-end */
