// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxImportSource @plasmicapp/react-web-runtime */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rqmTJ9WSF4RQaQFCvo2iUX
// Component: NQ_NX6MhhQIl
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rqmTJ9WSF4RQaQFCvo2iUX/projectcss
import sty from "./PlasmicPatientPrivateData.module.css"; // plasmic-import: NQ_NX6MhhQIl/css

export const PlasmicPatientPrivateData__VariantProps = new Array(
  "transparent",
  "succses"
);

export const PlasmicPatientPrivateData__ArgProps = new Array("value", "label");

const $$ = {};

function PlasmicPatientPrivateData__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "transparent",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.transparent
      },
      {
        path: "succses",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.succses
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root,
        {
          [sty.roottransparent]: hasVariant(
            $state,
            "transparent",
            "transparent"
          )
        }
      )}
      dir={"rtl"}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__yuhil,
          {
            [sty.texttransparent__yuhil0A1Tb]: hasVariant(
              $state,
              "transparent",
              "transparent"
            )
          }
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.label;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc :";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__ciWnO,
          {
            [sty.textsuccses__ciWnOOzdWd]: hasVariant(
              $state,
              "succses",
              "succses"
            )
          }
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "\u0622\u06cc\u062f\u0627 \u0627\u0631\u062f\u0627\u0646\u06cc";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPatientPrivateData__ArgProps,
          internalVariantPropNames: PlasmicPatientPrivateData__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPatientPrivateData__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPatientPrivateData";
  } else {
    func.displayName = `PlasmicPatientPrivateData.${nodeName}`;
  }
  return func;
}

export const PlasmicPatientPrivateData = Object.assign(
  // Top-level PlasmicPatientPrivateData renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicPatientPrivateData
    internalVariantProps: PlasmicPatientPrivateData__VariantProps,
    internalArgProps: PlasmicPatientPrivateData__ArgProps
  }
);

export default PlasmicPatientPrivateData;
/* prettier-ignore-end */
