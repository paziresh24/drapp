// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxImportSource @plasmicapp/react-web-runtime */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rqmTJ9WSF4RQaQFCvo2iUX
// Component: Y7zSCi-xgVNQ
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Popover } from "@paziresh24/apps/drapp/fragment/components/popover"; // plasmic-import: IlOOTfrZMl-5/codeComponent
import DrCenter from "../../DrCenter"; // plasmic-import: gnZ2lrwJIfnb/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rqmTJ9WSF4RQaQFCvo2iUX/projectcss
import sty from "./PlasmicDrCenters.module.css"; // plasmic-import: Y7zSCi-xgVNQ/css
import ChevronDownIcon from "../fragment_icons/icons/PlasmicIcon__ChevronDown"; // plasmic-import: aC_QFogxt1Ko/icon
import ChevronUpIcon from "../fragment_icons/icons/PlasmicIcon__ChevronUp"; // plasmic-import: YXreB8gS3SjV/icon

export const PlasmicDrCenters__VariantProps = new Array();

export const PlasmicDrCenters__ArgProps = new Array(
  "centers",
  "onSelectedCenterChange"
);

const $$ = {};

function PlasmicDrCenters__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "selectedCenter",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all",
        onChangeProp: "onSelectedCenterChange"
      },
      {
        path: "fragmentPopover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "fragmentPopover"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
      dr={"rtl"}
    >
      <Popover
        data-plasmic-name={"fragmentPopover"}
        data-plasmic-override={overrides.fragmentPopover}
        className={classNames("__wab_instance", sty.fragmentPopover)}
        content={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__v1Jlr)}
          >
            <DrCenter
              className={classNames("__wab_instance", sty.drCenter__qABnp)}
              name={"\u06a9\u0644 \u0646\u0648\u0628\u062a\u200c\u0647\u0627"}
              officeBook={undefined}
              onlineBook={undefined}
              onselected={async () => {
                const $steps = {};
                $steps["updateSelectedCenter"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selectedCenter"]
                        },
                        operation: 0,
                        value: "all"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelectedCenter"] != null &&
                  typeof $steps["updateSelectedCenter"] === "object" &&
                  typeof $steps["updateSelectedCenter"].then === "function"
                ) {
                  $steps["updateSelectedCenter"] = await $steps[
                    "updateSelectedCenter"
                  ];
                }
                $steps["updateSelectedCenter2"] = true
                  ? (() => {
                      const actionArgs = {
                        tplRef: "fragmentPopover",
                        action: "close"
                      };
                      return (({ tplRef, action, args }) => {
                        return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelectedCenter2"] != null &&
                  typeof $steps["updateSelectedCenter2"] === "object" &&
                  typeof $steps["updateSelectedCenter2"].then === "function"
                ) {
                  $steps["updateSelectedCenter2"] = await $steps[
                    "updateSelectedCenter2"
                  ];
                }
              }}
              selected={(() => {
                try {
                  return $state.selectedCenter == "all";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            />

            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $props.centers;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <DrCenter
                  className={classNames("__wab_instance", sty.drCenter__s2Wjj)}
                  key={currentIndex}
                  name={(() => {
                    try {
                      return currentItem.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  officeBook={(() => {
                    try {
                      return (
                        currentItem.name.includes("مطب") &&
                        currentItem.type_id === 1 &&
                        currentItem.id !== "5532"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onlineBook={(() => {
                    try {
                      return currentItem.id === "5532";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onselected={async () => {
                    const $steps = {};
                    $steps["updateSelectedCenter"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectedCenter"]
                            },
                            operation: 0,
                            value: currentItem.id
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectedCenter"] != null &&
                      typeof $steps["updateSelectedCenter"] === "object" &&
                      typeof $steps["updateSelectedCenter"].then === "function"
                    ) {
                      $steps["updateSelectedCenter"] = await $steps[
                        "updateSelectedCenter"
                      ];
                    }
                    $steps["updateSelectedCenter2"] = true
                      ? (() => {
                          const actionArgs = {
                            tplRef: "fragmentPopover",
                            action: "close"
                          };
                          return (({ tplRef, action, args }) => {
                            return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectedCenter2"] != null &&
                      typeof $steps["updateSelectedCenter2"] === "object" &&
                      typeof $steps["updateSelectedCenter2"].then === "function"
                    ) {
                      $steps["updateSelectedCenter2"] = await $steps[
                        "updateSelectedCenter2"
                      ];
                    }
                  }}
                  selected={(() => {
                    try {
                      return $state.selectedCenter == currentItem.id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                />
              );
            })}
          </Stack__>
        }
        onOpenChange={generateStateOnChangeProp($state, [
          "fragmentPopover",
          "open"
        ])}
        open={generateStateValueProp($state, ["fragmentPopover", "open"])}
        ref={ref => {
          $refs["fragmentPopover"] = ref;
        }}
        trigger={
          <div className={classNames(projectcss.all, sty.freeBox__dP8GQ)}>
            <div
              className={classNames(projectcss.all, sty.freeBox___4EVJx)}
              dr={"rtl"}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return (() => {
                        if ($state.selectedCenter == "all") return "کل نوبت‌ها";
                        if ($state.selectedCenter == "5532")
                          return "نوبت‌های آنلاین";
                        if (
                          $state.selectedCenter !== "5532" &&
                          $props.centers.find(
                            center => center.id == $state.selectedCenter
                          ).type_id == 1
                        )
                          return "نوبت‌های حضوری";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u06a9\u0644 \u0646\u0648\u0628\u062a\u200c\u0647\u0627";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {(() => {
                try {
                  return $state.fragmentPopover.open === false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <ChevronDownIcon
                  className={classNames(projectcss.all, sty.svg___57O6W)}
                  role={"img"}
                />
              ) : null}
              {(() => {
                try {
                  return $state.fragmentPopover.open === true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <ChevronUpIcon
                  className={classNames(projectcss.all, sty.svg__deGnp)}
                  role={"img"}
                />
              ) : null}
            </div>
          </div>
        }
      />
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "fragmentPopover", "text"],
  fragmentPopover: ["fragmentPopover", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDrCenters__ArgProps,
          internalVariantPropNames: PlasmicDrCenters__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDrCenters__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDrCenters";
  } else {
    func.displayName = `PlasmicDrCenters.${nodeName}`;
  }
  return func;
}

export const PlasmicDrCenters = Object.assign(
  // Top-level PlasmicDrCenters renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fragmentPopover: makeNodeComponent("fragmentPopover"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicDrCenters
    internalVariantProps: PlasmicDrCenters__VariantProps,
    internalArgProps: PlasmicDrCenters__ArgProps
  }
);

export default PlasmicDrCenters;
/* prettier-ignore-end */
