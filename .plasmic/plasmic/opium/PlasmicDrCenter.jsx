// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxImportSource @plasmicapp/react-web-runtime */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rqmTJ9WSF4RQaQFCvo2iUX
// Component: gnZ2lrwJIfnb
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rqmTJ9WSF4RQaQFCvo2iUX/projectcss
import sty from "./PlasmicDrCenter.module.css"; // plasmic-import: gnZ2lrwJIfnb/css

export const PlasmicDrCenter__VariantProps = new Array(
  "officeBook",
  "onlineBook",
  "selected"
);

export const PlasmicDrCenter__ArgProps = new Array("name", "onselected");

const $$ = {};

function PlasmicDrCenter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "officeBook",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.officeBook
      },
      {
        path: "onlineBook",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.onlineBook
      },
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootofficeBook]: hasVariant($state, "officeBook", "officeBook"),
          [sty.rootonlineBook]: hasVariant($state, "onlineBook", "onlineBook"),
          [sty.rootselected]: hasVariant($state, "selected", "selected")
        }
      )}
      onClick={async event => {
        const $steps = {};
        $steps["runOnselected"] = true
          ? (() => {
              const actionArgs = { eventRef: $props["onselected"] };
              return (({ eventRef, args }) => {
                return eventRef?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runOnselected"] != null &&
          typeof $steps["runOnselected"] === "object" &&
          typeof $steps["runOnselected"].then === "function"
        ) {
          $steps["runOnselected"] = await $steps["runOnselected"];
        }
      }}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textofficeBook]: hasVariant($state, "officeBook", "officeBook"),
          [sty.textonlineBook]: hasVariant($state, "onlineBook", "onlineBook")
        })}
      >
        {hasVariant($state, "onlineBook", "onlineBook") ? (
          <React.Fragment>
            {(() => {
              try {
                return "نوبت‌های آنلاین";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        ) : hasVariant($state, "officeBook", "officeBook") ? (
          <React.Fragment>
            {(() => {
              try {
                return " نوبت‌های حضوری ";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        ) : (
          <React.Fragment>
            {(() => {
              try {
                return $props.name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        )}
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDrCenter__ArgProps,
          internalVariantPropNames: PlasmicDrCenter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDrCenter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDrCenter";
  } else {
    func.displayName = `PlasmicDrCenter.${nodeName}`;
  }
  return func;
}

export const PlasmicDrCenter = Object.assign(
  // Top-level PlasmicDrCenter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicDrCenter
    internalVariantProps: PlasmicDrCenter__VariantProps,
    internalArgProps: PlasmicDrCenter__ArgProps
  }
);

export default PlasmicDrCenter;
/* prettier-ignore-end */
