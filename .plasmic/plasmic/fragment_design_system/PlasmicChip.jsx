// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxImportSource @plasmicapp/react-web-runtime */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h9Dbk9ygddw7UVEq1NNhKi
// Component: 1bFBcAoH0lNN
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import sty from "./PlasmicChip.module.css"; // plasmic-import: 1bFBcAoH0lNN/css
import SmileIcon from "../fragment_icons/icons/PlasmicIcon__Smile"; // plasmic-import: J8ozh55UiWsA/icon
import InfoIcon from "../fragment_icons/icons/PlasmicIcon__Info"; // plasmic-import: 7Dhq6fgU-utK/icon

export const PlasmicChip__VariantProps = new Array("color", "size", "rounded");

export const PlasmicChip__ArgProps = new Array(
  "content",
  "showStartIcon",
  "showEndIcon",
  "children",
  "slot"
);

const $$ = {};

function PlasmicChip__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          content: "\u0639\u0646\u0648\u0627\u0646",
          showStartIcon: false,
          showEndIcon: false
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "rounded",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.rounded
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolor_blue]: hasVariant($state, "color", "blue"),
          [sty.rootcolor_gray]: hasVariant($state, "color", "gray"),
          [sty.rootcolor_green]: hasVariant($state, "color", "green"),
          [sty.rootrounded]: hasVariant($state, "rounded", "rounded"),
          [sty.rootsize_medium]: hasVariant($state, "size", "medium"),
          [sty.rootsize_small]: hasVariant($state, "size", "small")
        }
      )}
      dir={"rtl"}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxcolor_blue]: hasVariant($state, "color", "blue"),
          [sty.freeBoxcolor_gray]: hasVariant($state, "color", "gray"),
          [sty.freeBoxcolor_green]: hasVariant($state, "color", "green"),
          [sty.freeBoxrounded]: hasVariant($state, "rounded", "rounded"),
          [sty.freeBoxsize_small]: hasVariant($state, "size", "small")
        })}
      >
        {(() => {
          try {
            return $props.showStartIcon;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()
          ? renderPlasmicSlot({
              defaultContents: (
                <SmileIcon
                  className={classNames(projectcss.all, sty.svg__s8UeY)}
                  role={"img"}
                />
              ),

              value: args.children
            })
          : null}
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textcolor_blue]: hasVariant($state, "color", "blue"),
              [sty.textcolor_gray]: hasVariant($state, "color", "gray"),
              [sty.textcolor_green]: hasVariant($state, "color", "green"),
              [sty.textsize_medium]: hasVariant($state, "size", "medium"),
              [sty.textsize_small]: hasVariant($state, "size", "small")
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.content;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        {(() => {
          try {
            return $props.showEndIcon;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()
          ? renderPlasmicSlot({
              defaultContents: (
                <InfoIcon
                  className={classNames(projectcss.all, sty.svg__f8Wpi)}
                  role={"img"}
                />
              ),

              value: args.slot
            })
          : null}
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "text"],
  freeBox: ["freeBox", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChip__ArgProps,
          internalVariantPropNames: PlasmicChip__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChip__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChip";
  } else {
    func.displayName = `PlasmicChip.${nodeName}`;
  }
  return func;
}

export const PlasmicChip = Object.assign(
  // Top-level PlasmicChip renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicChip
    internalVariantProps: PlasmicChip__VariantProps,
    internalArgProps: PlasmicChip__ArgProps
  }
);

export default PlasmicChip;
/* prettier-ignore-end */
