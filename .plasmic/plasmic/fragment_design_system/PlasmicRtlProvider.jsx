// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxImportSource @plasmicapp/react-web-runtime */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h9Dbk9ygddw7UVEq1NNhKi
// Component: Rg8wZ0CpGCye
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import sty from "./PlasmicRtlProvider.module.css"; // plasmic-import: Rg8wZ0CpGCye/css

export const PlasmicRtlProvider__VariantProps = new Array();

export const PlasmicRtlProvider__ArgProps = new Array("children");

const $$ = {};

function PlasmicRtlProvider__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      {renderPlasmicSlot({
        defaultContents: null,
        value: args.children
      })}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRtlProvider__ArgProps,
          internalVariantPropNames: PlasmicRtlProvider__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRtlProvider__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRtlProvider";
  } else {
    func.displayName = `PlasmicRtlProvider.${nodeName}`;
  }
  return func;
}

export const PlasmicRtlProvider = Object.assign(
  // Top-level PlasmicRtlProvider renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicRtlProvider
    internalVariantProps: PlasmicRtlProvider__VariantProps,
    internalArgProps: PlasmicRtlProvider__ArgProps
  }
);

export default PlasmicRtlProvider;
/* prettier-ignore-end */
