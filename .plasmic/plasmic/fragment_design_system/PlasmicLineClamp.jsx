// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxImportSource @plasmicapp/react-web-runtime */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h9Dbk9ygddw7UVEq1NNhKi
// Component: fa_t7ELXcm5k
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import sty from "./PlasmicLineClamp.module.css"; // plasmic-import: fa_t7ELXcm5k/css

export const PlasmicLineClamp__VariantProps = new Array();

export const PlasmicLineClamp__ArgProps = new Array(
  "children",
  "numberOfLines"
);

const $$ = {};

function PlasmicLineClamp__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          numberOfLines: 1
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      style={(() => {
        try {
          return {
            overflow: "hidden",
            "-webkit-line-clamp": $props.numberOfLines.toString(),
            "-webkit-box-orient": "vertical",
            display: "-webkit-box"
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return {};
          }
          throw e;
        }
      })()}
    >
      {renderPlasmicSlot({
        defaultContents: null,
        value: args.children
      })}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLineClamp__ArgProps,
          internalVariantPropNames: PlasmicLineClamp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLineClamp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLineClamp";
  } else {
    func.displayName = `PlasmicLineClamp.${nodeName}`;
  }
  return func;
}

export const PlasmicLineClamp = Object.assign(
  // Top-level PlasmicLineClamp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicLineClamp
    internalVariantProps: PlasmicLineClamp__VariantProps,
    internalArgProps: PlasmicLineClamp__ArgProps
  }
);

export default PlasmicLineClamp;
/* prettier-ignore-end */
