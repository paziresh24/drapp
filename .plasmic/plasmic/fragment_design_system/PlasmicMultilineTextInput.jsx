// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxImportSource @plasmicapp/react-web-runtime */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: h9Dbk9ygddw7UVEq1NNhKi
// Component: CZBpNouNw7Ui
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import sty from "./PlasmicMultilineTextInput.module.css"; // plasmic-import: CZBpNouNw7Ui/css

export const PlasmicMultilineTextInput__VariantProps = new Array();

export const PlasmicMultilineTextInput__ArgProps = new Array(
  "value",
  "onValueChange",
  "placeholder",
  "autoSize"
);

const $$ = {};

function PlasmicMultilineTextInput__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          autoSize: false
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "value",
        type: "writable",
        variableType: "text",
        valueProp: "value",
        onChangeProp: "onValueChange"
      },
      {
        path: "height",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "2.5rem"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <textarea
        data-plasmic-name={"textarea"}
        data-plasmic-override={overrides.textarea}
        className={classNames(
          projectcss.all,
          projectcss.textarea,
          sty.textarea
        )}
        onChange={async (...eventArgs) => {
          (e => {
            generateStateOnChangeProp($state, ["textarea", "value"])(
              e.target.value
            );
          }).apply(null, eventArgs);
          (async event => {
            const $steps = {};
            $steps["updateValue"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["value"]
                    },
                    operation: 0,
                    value: $state.textarea.value
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;
                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateValue"] != null &&
              typeof $steps["updateValue"] === "object" &&
              typeof $steps["updateValue"].then === "function"
            ) {
              $steps["updateValue"] = await $steps["updateValue"];
            }
          }).apply(null, eventArgs);
        }}
        onInput={async event => {
          const $steps = {};
          $steps["runCode"] = $props.autoSize
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      event.currentTarget.style.height = "2.5rem";
                      return (event.currentTarget.style.height =
                        event.currentTarget.scrollHeight + "px");
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
        placeholder={(() => {
          try {
            return $props.placeholder;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        ref={ref => {
          $refs["textarea"] = ref;
        }}
        style={{ resize: "none", overflow: "hidden" }}
        value={generateStateValueProp($state, ["textarea", "value"]) ?? ""}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "textarea"],
  textarea: ["textarea"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMultilineTextInput__ArgProps,
          internalVariantPropNames: PlasmicMultilineTextInput__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMultilineTextInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMultilineTextInput";
  } else {
    func.displayName = `PlasmicMultilineTextInput.${nodeName}`;
  }
  return func;
}

export const PlasmicMultilineTextInput = Object.assign(
  // Top-level PlasmicMultilineTextInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textarea: makeNodeComponent("textarea"),
    // Metadata about props expected for PlasmicMultilineTextInput
    internalVariantProps: PlasmicMultilineTextInput__VariantProps,
    internalArgProps: PlasmicMultilineTextInput__ArgProps
  }
);

export default PlasmicMultilineTextInput;
/* prettier-ignore-end */
